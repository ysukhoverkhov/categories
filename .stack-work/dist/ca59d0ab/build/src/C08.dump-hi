
==================== FINAL INTERFACE ====================
2017-08-03 20:48:37.3261712 UTC

interface categories-0.1.0.0-GjjdZ4skuy04tpHeBwUMgz:C08 8002
  interface hash: fed4d1115808ca388ff326293cfbb463
  ABI hash: ccbbf8eeda5daf1ed81aa3d8021b9ada
  export-list hash: 7ecc26b61f62022e2a76292393c9735e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0860b393117430a8055eef948682328e
  sig of: Nothing
  used TH splices: False
  where
exports:
  C08.c08
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Applicative 2c56a0c43327cbbcb6e7a55bf05443c9
import  -/  base-4.9.1.0:Data.Bifunctor e8e036ae8428a1a8769edf5a263da5a7
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
adf03ad153a371e94dfe08905e6b1aaf
  $fBifunctorPair :: Data.Bifunctor.Bifunctor C08.Pair
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ C08.Pair
                  C08.$fBifunctorPair_$cbimap
                  C08.$fBifunctorPair_$cfirst
                  C08.$fBifunctorPair_$csecond -}
adf03ad153a371e94dfe08905e6b1aaf
  $fBifunctorPair_$cbimap ::
    (a -> b) -> (c -> d) -> C08.Pair a c -> C08.Pair b d
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (f :: a -> b)
                   (g :: c -> d)
                   (x :: C08.Pair a c) ->
                 case x of wild { C08.Pair a1 b1 ->
                 C08.Pair @ b @ d (f a1) (g b1) }) -}
adf03ad153a371e94dfe08905e6b1aaf
  $fBifunctorPair_$cfirst :: (a -> b) -> C08.Pair a c -> C08.Pair b c
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b @ c (f :: a -> b) (ds :: C08.Pair a c) ->
                 case ds of wild { C08.Pair a1 b1 ->
                 C08.Pair @ b @ c (f a1) b1 }) -}
adf03ad153a371e94dfe08905e6b1aaf
  $fBifunctorPair_$csecond ::
    (b -> c) -> C08.Pair a b -> C08.Pair a c
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ b @ c @ a (f :: b -> c) (ds :: C08.Pair a b) ->
                 case ds of wild { C08.Pair a1 b1 ->
                 C08.Pair @ a @ c a1 (f b1) }) -}
adf03ad153a371e94dfe08905e6b1aaf
  $fShowPair ::
    (GHC.Show.Show b, GHC.Show.Show a) => GHC.Show.Show (C08.Pair a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show b)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (C08.Pair a b)
                  (C08.$fShowPair_$cshowsPrec @ a @ b $dShow $dShow1)
                  (C08.$fShowPair_$cshow @ a @ b $dShow $dShow1)
                  (C08.$fShowPair_$cshowList @ a @ b $dShow $dShow1) -}
34910402e1ad19d5ef8c520396cd97b9
  $fShowPair1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
9c4190a949ea6aeeafa9b6b5b18d4fe6
  $fShowPair2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pair "#) -}
23d70a64ce49db1496e3b7eabb85d960
  $fShowPair3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
adf03ad153a371e94dfe08905e6b1aaf
  $fShowPair_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    C08.Pair a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: C08.Pair a b) ->
                 C08.$fShowPair_$cshowsPrec
                   @ a
                   @ b
                   $dShow
                   $dShow1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
adf03ad153a371e94dfe08905e6b1aaf
  $fShowPair_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [C08.Pair a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [C08.Pair a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (C08.Pair a b)
                   (C08.$fShowPair_$cshowsPrec @ a @ b $dShow $dShow1 C08.$fShowPair1)
                   eta
                   eta1) -}
adf03ad153a371e94dfe08905e6b1aaf
  $fShowPair_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> C08.Pair a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: C08.Pair a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { C08.Pair ww3 ww4 ->
                 C08.$w$cshowsPrec @ a @ b w w1 ww1 ww3 ww4 } }) -}
148f804495906eee958202f07b7433f5
  $tc'Pair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6519803260678940422##
                   4929347630702986809##
                   C08.$trModule
                   C08.$tc'Pair1) -}
b7bd827eb44342022050f0969b6ff558
  $tc'Pair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pair"#) -}
0881170a21227df3d349b11b797e7a7e
  $tcPair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14985148300656602010##
                   9469844499261745930##
                   C08.$trModule
                   C08.$tcPair1) -}
aba30ae2099a4ff83b419e1831df7e26
  $tcPair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Pair"#) -}
95cc92c84d201b9421461cb2d998865a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module C08.$trModule2 C08.$trModule1) -}
6b608da48d28a1c581ca9653ed64f828
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "C08"#) -}
c97131f7cc18042832ed2a81ff81c350
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "categories-0.1.0.0-GjjdZ4skuy04tpHeBwUMgz"#) -}
7fbb2ff731aed9ebbdabb5f0a5d5e128
  $w$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w1 C08.$fShowPair3 ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w C08.$fShowPair3 ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        C08.$fShowPair2
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           C08.$fShowPair2
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))))) }) -}
adf03ad153a371e94dfe08905e6b1aaf
  data Pair a b = Pair a b
c53e5df5f136a5a8df92047c01baa774
  c08 :: GHC.Types.IO ()
  {- Strictness: x -}
instance [safe] Data.Bifunctor.Bifunctor [C08.Pair]
  = C08.$fBifunctorPair
instance [safe] GHC.Show.Show [C08.Pair] = C08.$fShowPair
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

